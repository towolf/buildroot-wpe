--- a/Source/WebCore/platform/graphics/cairo/ImageBufferCairo.cpp	2017-04-30 16:35:13.970725390 +0200
+++ b/Source/WebCore/platform/graphics/cairo/ImageBufferCairo.cpp	2017-04-30 16:39:46.909832548 +0200
@@ -70,14 +70,14 @@
 
 namespace WebCore {
 
-bool cairoIsUsingMSAA()
+bool cairoIsUsingNOAA()
 {
     // Cairo will use MSAA if the extensions GL_OES_packed_depth_stencil and GL_EXT_multisampled_render_to_texture
     // are available, and when it's told to use the msaa compositor through the CAIRO_GL_COMPOSITOR env variable.
     const char *env = getenv ("CAIRO_GL_COMPOSITOR");
-    bool usingMSAACompositor = env && strcmp(env, "msaa") == 0;
+    bool usingNOAACompositor = env && strcmp(env, "noaa") == 0;
 
-    return usingMSAACompositor && Extensions3DCache::singleton().GL_OES_packed_depth_stencil() && Extensions3DCache::singleton().GL_EXT_multisampled_render_to_texture();
+    return usingNOAACompositor;
 }
 
 ImageBufferData::ImageBufferData(const IntSize& size, RenderingMode renderingMode)
@@ -266,7 +266,7 @@
     RefPtr<cairo_t> cr = adoptRef(cairo_create(m_data.m_surface.get()));
     m_data.m_platformContext.setCr(cr.get());
     // Disable antialiasing if using the GL backend but cairo is not using MSAA.
-    if ((m_data.m_renderingMode == Accelerated) && !cairoIsUsingMSAA())
+    if (cairoIsUsingNOAA())
         cairo_set_antialias(cr.get(), CAIRO_ANTIALIAS_NONE);
     m_data.m_context = std::make_unique<GraphicsContext>(&m_data.m_platformContext);
     success = true;
